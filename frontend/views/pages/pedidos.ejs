<div class="container">

  <h3>
    <%= title %>
  </h3>
  
  <form id="pedidoForm" class="col s12">
    <input type="hidden" name="id" id="id" />
    
    <div class="input-field">
      <input required name="dataHora" id="dataHora" type="datetime-local">
      <label for="dataHora" class="active">Data e Hora</label>
    </div>
    
    <div class="input-field">
      <select required name="cliente" id="cliente">
        <option value="" disabled selected>Selecione um cliente</option>
      </select>
      <label for="cliente">Cliente</label>
    </div>
    
    <div class="input-field">
      <select required name="statusPedido" id="statusPedido">
        <option value="" disabled selected>Selecione</option>
        <option value="Em preparo">Em preparo</option>
        <option value="Pronto para entrega">Pronto para entrega</option>
        <option value="Saiu para entrega">Saiu para entrega</option>
        <option value="Entregue">Entregue</option>
        <option value="Cancelado">Cancelado</option>
      </select>
      <label for="statusPedido">Status do Pedido</label>
    </div>
    
    <div class="input-field">
      <select required name="formaPagamento" id="formaPagamento">
        <option value="" disabled selected>Selecione</option>
        <option value="Dinheiro">Dinheiro</option>
        <option value="PIX">PIX</option>
        <option value="Cartão">Cartão</option>
      </select>
      <label for="formaPagamento">Forma de Pagamento</label>
    </div>
    
    <fieldset>
      <legend>Itens do Pedido</legend>
      <div id="itensCheckbox" class="input-field"></div>
    </fieldset>
    
    <div class="input-field">
      <input required name="totalPedido" id="totalPedido" type="text" readonly>
      <label for="totalPedido" class="active">Total do Pedido</label>
    </div>
    
    <div class="input-field">
      <select required name="tipoPedido" id="tipoPedido">
        <option value="" disabled selected>Selecione</option>
        <option value="Retirada">Retirada</option>
        <option value="Entrega">Entrega</option>
        <option value="Mesa">Mesa</option>
      </select>
      <label for="tipoPedido">Tipo do Pedido</label>
    </div>
    
    <div class="input-field">
      <input name="observacoes" id="observacoes" type="text">
      <label for="observacoes">Observações</label>
    </div>
    
    <div class="input-field">
      <input name="enderecoEntrega" id="enderecoEntrega" type="text" readonly>
      <label for="enderecoEntrega">Endereço de Entrega</label>
    </div>
    
    <button class="btn waves-effect waves-light" type="submit"><i class="material-icons right">send</i>Enviar</button>
    <button class="btn waves-effect waves-light" type="reset"><i class="material-icons right">cancel</i>Cancelar</button>  
  </form>
</div>
  
<span id="error" class="red-text"></span>

<table class="highlight">
  <thead>
    <tr>
      <% for(let col of cols) { %>
        <th><%= col %></th>
      <% } %>
    </tr>
  </thead>
  <tbody>
    <% for(let pedido of pedidos) { %>
      <tr>
        <td><%= pedido.id %></td>
        <td><%= pedido.dataHora %></td>
        <td><%= pedido.cliente %></td>
        <td><%= pedido.statusPedido %></td>
        <td><%= pedido.formaPagamento %></td>
        <td>
          <%= typeof pedido.totalPedido === 'number' ? pedido.totalPedido.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' }) : pedido.totalPedido %>
        </td>
        <td><%= pedido.observacoes %></td>
        <td>
          <% if (Array.isArray(pedido.itensPedido)) { %>
            <%= pedido.itensPedido.join(', ') %>
          <% } else { %>
            <%= pedido.itensPedido %>
          <% } %>
        </td>
        <td><%= pedido.tipoPedido %></td>
        <td><%= pedido.enderecoEntrega %></td>
        <td>
          <button onclick="editPedido('<%= pedido.id %>')" class="btn-small blue">Editar</button>
          <button onclick="deletePedido('<%= pedido.id %>')" class="btn-small red">Deletar</button>
        </td>
      </tr>
    <% } %>
  </tbody>
</table>

<script>
  window.TOKEN = "<%= token %>";
  const BASE_URL = "http://localhost:3000";

  const form = document.getElementById('pedidoForm');

  form.addEventListener("submit", async (e) => {
    e.preventDefault();
    const pedido = mountDataForm();
    const METHOD = pedido.id ? 'PUT' : 'POST';
    const URL = pedido.id ? `/pedidos/${pedido.id}` : '/pedidos';

    try {
      const res = await fetch(URL, {
        method: METHOD,
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(pedido)
      });
      await checkError(res);
      form.reset();
      window.location.reload();
    } catch (error) {
      document.getElementById('error').innerText = error.message || JSON.stringify(error);
    }
  });

  function editPedido(id) {
    fetch(`/pedidos/${id}`)
      .then(res => checkError(res))
      .then(pedido => {
        for (let prop in pedido) {
          const input = document.querySelector(`[name="${prop}"]`);
          if (input) {
            if (input.tagName === 'SELECT') {
              input.value = pedido[prop];
              M.FormSelect.getInstance(input)?.destroy();
              M.FormSelect.init(input);
            } else if (prop === "dataHora" && input.type === "datetime-local") {
              input.value = pedido[prop].slice(0,16).replace(' ', 'T');
            } else {
              input.value = pedido[prop];
            }
          }
        }
        document.querySelectorAll('input[name="itensPedido"]').forEach(cb => {
          cb.checked = pedido.itensPedido.includes(cb.value);
        });
        calcularTotal();
      })
      .catch(err => document.getElementById('error').innerText = err);
  }

  function deletePedido(id) {
    fetch(`/pedidos/${id}`, { method: "DELETE" })
      .then(res => checkError(res))
      .then(() => window.location.reload())
      .catch(err => document.getElementById('error').innerText = err);
  }

  function mountDataForm() {
    const formData = new FormData(form);
    const pedido = {};
    formData.forEach((v, k) => {
      if (k !== "itensPedido") pedido[k] = v;
    });
    const checkboxes = document.querySelectorAll('input[name="itensPedido"]:checked');
    pedido.itensPedido = Array.from(checkboxes).map(cb => cb.value);
    pedido.totalPedido = calcularTotal(true);
    return pedido;
  }

  function calcularTotal(returnValue = false) {
    const checkboxes = document.querySelectorAll('input[name="itensPedido"]:checked');
    let total = 0;
    checkboxes.forEach(cb => {
      const preco = parseFloat(cb.getAttribute('data-preco'));
      if (!isNaN(preco)) total += preco;
    });
    const totalField = document.getElementById('totalPedido');
    totalField.value = total.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });
    if (returnValue) return total;
  }

  async function loadProdutos() {
    try {
      const res = await fetch(`${BASE_URL}/produtos`, { headers: { "Authorization": `Bearer ${window.TOKEN}` } });
      const produtos = await checkError(res);
      const container = document.getElementById('itensCheckbox');
      container.innerHTML = '';
      produtos.forEach(prod => {
        const preco = parseFloat(prod.preco.toString().replace(',', '.'));
        const p = document.createElement('p');
        const label = document.createElement('label');
        const checkbox = document.createElement('input');
        checkbox.type = 'checkbox';
        checkbox.name = 'itensPedido';
        checkbox.value = prod.id;
        checkbox.classList.add('filled-in');
        checkbox.setAttribute('data-preco', preco);
        checkbox.addEventListener('change', () => calcularTotal());
        const span = document.createElement('span');
        span.textContent = `${prod.nome} - R$ ${preco.toFixed(2)}`;
        label.appendChild(checkbox);
        label.appendChild(span);
        p.appendChild(label);
        container.appendChild(p);
      });
    } catch (err) {
      console.error('Erro ao carregar produtos:', err);
    }
  }

  async function loadClientes() {
    try {
      const res = await fetch(`${BASE_URL}/clientes`, { headers: { "Authorization": `Bearer ${window.TOKEN}` } });
      const clientes = await checkError(res);
      const select = document.getElementById('cliente');
      select.innerHTML = '<option value="" disabled selected>Selecione um cliente</option>';
      clientes.forEach(cli => {
        const opt = document.createElement('option');
        opt.value = cli.id;
        opt.textContent = cli.nome;
        select.appendChild(opt);
      });
      select.addEventListener('change', e => preencherEnderecoCliente(e.target.value));
      M.FormSelect.init(select);
    } catch (err) {
      console.error('Erro ao carregar clientes:', err);
    }
  }

  async function preencherEnderecoCliente(clienteId) {
    if (!clienteId) {
      document.getElementById('enderecoEntrega').value = '';
      return;
    }
    try {
      const res = await fetch(`${BASE_URL}/clientes/${clienteId}`, { headers: { "Authorization": `Bearer ${window.TOKEN}` } });
      const cliente = await checkError(res);
      const endereco = `${cliente.logradouro || ''}, ${cliente.bairro || ''}, ${cliente.cep || ''}, ${cliente.estado || ''}`;
      document.getElementById('enderecoEntrega').value = endereco.trim();
    } catch (err) {
      console.error('Erro ao preencher endereço:', err);
    }
  }

  async function checkError(res) {
    if (!res.ok) {
      const err = await res.json();
      throw err;
    }
    return res.json();
  }

  document.addEventListener('DOMContentLoaded', async () => {
    await loadProdutos();
    await loadClientes();
    M.FormSelect.init(document.querySelectorAll('select'));
  });
</script>
