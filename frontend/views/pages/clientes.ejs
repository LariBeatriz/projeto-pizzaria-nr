<div class="container">
  <h4 class="center-align"><%= title %></h4>

  <form id="clienteForm" class="row">
    <input required type="hidden" name="id" id="id">

    <div class="input-field col s12 m6">
      <i class="material-icons prefix">person</i>
      <input required name="nome" id="nome" type="text">
      <label for="nome">Nome</label>
    </div>

    <div class="input-field col s12 m6">
      <i class="material-icons prefix">email</i>
      <input required name="email" id="email" type="email">
      <label for="email">Email</label>
    </div>

    <div class="input-field col s12 m6">
      <i class="material-icons prefix">calendar_today</i>
      <input required name="data_nascimento" id="data_nascimento" type="date">
      <label for="data_nascimento" class="active">Data de Nascimento</label>
    </div>

    <div class="input-field col s12 m6">
      <i class="material-icons prefix">phone</i>
      <input required name="contato" id="contato" type="text" oninput="formatarTelefone(this)"
        maxlength="16" placeholder="(XX) XXXXX-XXXX">
      <label for="contato">Contato</label>
    </div>

    <div class="input-field col s12 m6">
      <i class="material-icons prefix">location_on</i>
      <input required name="cep" id="cep" type="text" oninput="formatarCEP(this)" 
        maxlength="9" placeholder="XXXXX-XXX">
      <label for="cep">CEP</label>
    </div>

    <div class="input-field col s12 m6">
      <i class="material-icons prefix">home</i>
      <input required name="logradouro" id="logradouro" type="text">
      <label for="logradouro">Logradouro</label>
    </div>

    <div class="input-field col s12 m6">
      <i class="material-icons prefix">add_location</i>
      <input name="complemento" id="complemento" type="text">
      <label for="complemento">Complemento</label>
    </div>

    <div class="input-field col s12 m6">
      <i class="material-icons prefix">business</i>
      <input required name="bairro" id="bairro" type="text">
      <label for="bairro">Bairro</label>
    </div>

    <div class="input-field col s12 m6">
      <i class="material-icons prefix">flag</i>
      <input required name="estado" id="estado" type="text">
      <label for="estado">Estado</label>
    </div>

    <div class="col s12" style="margin-top: 1.5rem;">
      <div style="display: flex; gap: 1rem;">
        <button type="submit" class="btn waves-effect waves-light green">
          <i class="material-icons left">send</i>Enviar
        </button>
        <button type="reset" class="btn red lighten-1 waves-effect">
          <i class="material-icons left">cancel</i>Cancelar
        </button>
      </div>
    </div>
  </form>

  <div class="red-text" id="error"></div>

  <% if (error) { %>
    <div class="red-text"><%= JSON.stringify(error) %></div>
  <% } %>

  <table class="highlight responsive-table">
    <thead>
      <tr>
        <% for(let col of cols) { %>
          <th><%= col %></th>
        <% } %>
        
      </tr>
    </thead>
    <tbody>
      <% for(let cliente of clientes) { %>
        <tr>
          <% for(let prop in cliente) { %>
            <td><%= cliente[prop] %></td>
          <% } %>
          <td>
            <div style="display: flex; gap: 0.5rem;">
              <button onclick="editCliente('<%= cliente.id %>')" 
                class="btn-small blue waves-effect">
                <i class="material-icons">edit</i>
              </button>
              <button onclick="deleteCliente('<%= cliente.id %>')" 
                class="btn-small red waves-effect">
                <i class="material-icons">delete</i>
              </button>
            </div>
          </td>
        </tr>
      <% } %>
    </tbody>
  </table>

  <div style="padding-bottom: 2rem;"></div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        M.updateTextFields();
    });

    const form = document.getElementById('clienteForm');
    form.addEventListener("submit", (e) => {
        e.preventDefault();
        const cliente = mountDataForm();

        let id = cliente.id;
        let METHOD = id ? 'PUT' : 'POST';
        let URL = id ? `/clientes/${id}` : '/clientes';

        createOrUpdate(cliente, URL, METHOD);
    });

    function createOrUpdate(cliente, URL, METHOD) {
        fetch(URL, {
            method: METHOD,
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(cliente)
        })
        .then(async(res) => checkError(res))
        .then(() => { 
            form.reset();
            window.location.reload();
        })
        .catch((error) => { 
            document.getElementById('error').innerText = error.message || JSON.stringify(error);
        });
    }

    function editCliente(id) {
        fetch("/clientes/" + id, { method: "GET" })
        .then(async (res) => checkError(res))
        .then(cliente => {
            for (let prop in cliente) {
                const input = document.querySelector(`input[name="${prop}"]`);
                if (input) input.value = cliente[prop];
            }
            M.updateTextFields();
        })
        .catch(error => { document.getElementById('error').innerText = error });
    }

    function deleteCliente(id) {
        fetch("/clientes/" + id, { method: "DELETE" })
        .then(async (res) => checkError(res))
        .then(() => { window.location.reload(); })
        .catch((error) => { document.getElementById('error').innerText = JSON.stringify(error) });
    }

    async function checkError(res) {
        if (!res.ok) {
            const err = await res.json();
            throw err;
        }
        return res.json();
    }

    function mountDataForm() {
        const formData = new FormData(form);
        const cliente = {};
        formData.forEach((v, k) => { cliente[k] = v; });
        return cliente;
    }

    function formatarTelefone(input) {
        let telefone = input.value.replace(/\D/g, '');
        if (telefone.length <= 2) {
            telefone = `(${telefone}`;
        } else if (telefone.length <= 6) {
            telefone = `(${telefone.substring(0, 2)}) ${telefone.substring(2)}`;
        } else if (telefone.length <= 10) {
            telefone = `(${telefone.substring(0, 2)}) ${telefone.substring(2, 6)}-${telefone.substring(6)}`;
        } else {
            telefone = `(${telefone.substring(0, 2)}) ${telefone.substring(2, 7)}-${telefone.substring(7, 11)}`;
        }
        input.value = telefone;
    }

    function formatarCEP(input) {
        let cep = input.value.replace(/\D/g, '');
        if (cep.length > 5) {
            cep = cep.slice(0, 5) + '-' + cep.slice(5, 8);
        }
        input.value = cep;
    }

    document.getElementById('cep').addEventListener('blur', buscarCEP);

    function buscarCEP() {
        const cep = document.getElementById('cep').value.replace(/\D/g, '');
        const errorSpan = document.getElementById('error');

        if (cep.length !== 8) {
            errorSpan.innerText = 'CEP inválido. Digite 8 números.';
            return;
        }

        fetch(`https://viacep.com.br/ws/${cep}/json/`)
            .then(response => response.json())
            .then(data => {
                if (data.erro) {
                    errorSpan.innerText = 'CEP não encontrado.';
                    return;
                }
                document.getElementById('logradouro').value = data.logradouro || '';
                document.getElementById('bairro').value = data.bairro || '';
                document.getElementById('estado').value = data.uf || '';
                M.updateTextFields();
                errorSpan.innerText = '';
            })
            .catch(error => {
                errorSpan.innerText = 'Erro ao buscar CEP. Tente novamente.';
                console.error('Erro:', error);
            });
    }
</script>
